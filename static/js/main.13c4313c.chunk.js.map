{"version":3,"sources":["index.module.css","components/Employer.js","data/arr_EN.js","components/Employees.js","components/EmployeesBD.js","pages/EmployeesPage.js","index.js","styles/Employees.module.css","styles/EmployeesBD.module.css"],"names":["module","exports","Employer","employer","onFindEmployerID","checkedValues","useState","state","setState","color","setColor","handleChange","target","employerExist","find","value","id","checked","checkedValue","useEffect","style","lastName","firstName","onChange","type","name","arr_EN","Employees","employees","onAddActiveEmployees","onDeleteEmployerById","setCheckedValues","handleFindEmployer","activeEmployer","filter","e","newCheckedValue","parsedValues","JSON","parse","localStorage","getItem","setItem","stringify","markup","className","styles","wrapper","empList","map","letter","emp","charAt","length","values","monthArr","EmployeesBD","month","toLowerCase","Date","dob","toLocaleString","day","year","sortedEmployees","sort","a","b","nameA","nameB","parsedEmployees","EmployeesPage","setEmployees","activeEmployees","setActiveEmployees","sortedEmployeesbyLastname","sortedActiveEmployeesbyLastname","parsedActiveEmployees","axios","get","then","data","console","log","activeEmployeesJSON","employeesJson","App","container","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.13c4313c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"src_container__12MZc\"};","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nconst Employer = ({ employer, onFindEmployerID, checkedValues }) => {\n  const [state, setState] = useState(false);\n  const [color, setColor] = useState(null);\n\n  const handleChange = ({ target }) => {\n    const employerExist = checkedValues.find(value => value.id === employer.id);\n    target.value === 'true' ? setColor({ color: 'red' }) : setColor(null);\n\n    if (employerExist && target.value === 'true') {\n      onFindEmployerID(employer.id, target.value, target.checked);\n      setState(employerExist.checkedValue);\n    } else {\n      onFindEmployerID(employer.id, target.value, target.checked);\n      setState(false);\n      setColor(null);\n    }\n  };\n\n  useEffect(() => {\n    const employerExist = checkedValues.find(value => value.id === employer.id);\n    if (employerExist) {\n      setState(employerExist.checkedValue);\n      setColor({ color: employerExist.color });\n    }\n  }, [employer.id, checkedValues]);\n\n  return (\n    <form>\n      <p\n        style={color || { color: 'black' }}\n      >{`${employer.lastName} ${employer.firstName}`}</p>\n      <label>\n        Active\n        <input\n          onChange={handleChange}\n          checked={state}\n          type=\"radio\"\n          name={employer.lastName}\n          value=\"true\"\n        />\n      </label>\n      <label>\n        Not Active\n        <input\n          checked={!state}\n          onChange={handleChange}\n          name={employer.lastName}\n          type=\"radio\"\n          value=\"false\"\n        />\n      </label>\n    </form>\n  );\n};\n\nEmployer.propTypes = {\n  employeer: PropTypes.objectOf({\n    id: PropTypes.string.isRequired,\n    lastName: PropTypes.string.isRequired,\n    firstName: PropTypes.string.isRequired,\n  }),\n  onFindEmployerID: PropTypes.func,\n  checkedValues: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n    }),\n  ),\n};\n\nexport default Employer;\n","const arr_EN = [\n  'A',\n  'B',\n  'C',\n  'D',\n  'E',\n  'F',\n  'G',\n  'H',\n  'I',\n  'J',\n  'K',\n  'L',\n  'M',\n  'N',\n  'O',\n  'P',\n  'Q',\n  'R',\n  'S',\n  'T',\n  'U',\n  'V',\n  'W',\n  'X',\n  'Y',\n  'Z',\n];\n\nexport default arr_EN;\n","import styles from '../styles/Employees.module.css';\nimport React, { Fragment, useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport Employer from './Employer';\nimport arr_EN from '../data/arr_EN';\n\nconst Employees = ({\n  employees,\n  onAddActiveEmployees,\n  onDeleteEmployerById,\n}) => {\n  const [checkedValues, setCheckedValues] = useState([]);\n  const handleFindEmployer = (id, value) => {\n    if (value === 'true') {\n      const activeEmployer = employees.filter(e => e.id === id)[0];\n      onAddActiveEmployees(activeEmployer);\n\n      const newCheckedValue = {\n        checkedValue: true,\n        id,\n        color: 'red',\n      };\n\n      setCheckedValues([...checkedValues, newCheckedValue]);\n    } else if (value === 'false') {\n      setCheckedValues(checkedValues.filter(value => value.id !== id));\n      onDeleteEmployerById(id);\n    }\n  };\n\n  useEffect(() => {\n    const parsedValues = JSON.parse(localStorage.getItem('checkedValues'));\n    if (parsedValues) {\n      setCheckedValues(parsedValues);\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem('checkedValues', JSON.stringify(checkedValues));\n  }, [checkedValues]);\n\n  const markup = (\n    <div className={styles.wrapper}>\n      {\n        <ul className={styles.empList}>\n          {arr_EN.map(letter => (\n            <li key={letter}>\n              <h4>{letter}</h4>\n              <Fragment>\n                {(employees\n                  .filter(emp => letter === emp.lastName.charAt(0))\n                  .map(emp => <Employer />).length &&\n                  employees\n                    .filter(emp => letter === emp.lastName.charAt(0))\n                    .map(emp => (\n                      <Employer\n                        onFindEmployerID={handleFindEmployer}\n                        key={emp.id}\n                        employer={emp}\n                        values={checkedValues}\n                        checkedValues={checkedValues}\n                      />\n                    ))) || <p>---</p>}\n              </Fragment>\n            </li>\n          ))}\n        </ul>\n      }\n    </div>\n  );\n  return <Fragment>{markup}</Fragment>;\n};\n\nEmployees.propTypes = {\n  employees: PropTypes.arrayOf(\n    PropTypes.shape({\n      lastName: PropTypes.string.isRequired,\n      id: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n\n  onAddActiveEmployees: PropTypes.func.isRequired,\n  onDeleteEmployerById: PropTypes.func.isRequired,\n};\n\nexport { Employees as default };\n","import styles from '../styles/EmployeesBD.module.css';\n\nimport React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\n\nlet monthArr = [\n  'May',\n  'June',\n  'July',\n  'August',\n  'September',\n  'October',\n  'November',\n  'December',\n];\n\nconst EmployeesBD = ({ employees }) => {\n  return (\n    <div className={styles.wrapper}>\n      <ul className={styles.empList}>\n        {monthArr.map(\n          month =>\n            employees.filter(\n              emp =>\n                month.toLowerCase() ===\n                new Date(emp.dob)\n                  .toLocaleString('en', { month: 'long' })\n                  .toLowerCase(),\n            ).length > 0 && (\n              <li key={month}>\n                <h4>{month}</h4>\n                <Fragment>\n                  {employees\n                    .filter(\n                      emp =>\n                        month.toLowerCase() ===\n                        new Date(emp.dob)\n                          .toLocaleString('en', { month: 'long' })\n                          .toLowerCase(),\n                    )\n                    .map(emp => (\n                      <div key={emp.id}>\n                        <p>\n                          {emp.firstName}\n                          {emp.lastName}\n                        </p>\n                        <p>\n                          {new Date(emp.dob).toLocaleString('en', {\n                            month: 'long',\n                            day: 'numeric',\n                            year: 'numeric',\n                          })}\n                        </p>\n                      </div>\n                    ))}\n                </Fragment>\n              </li>\n            ),\n        )}\n      </ul>\n    </div>\n  );\n};\n\nEmployeesBD.propTypes = {\n  employees: PropTypes.arrayOf(\n    PropTypes.shape({\n      lastName: PropTypes.string.isRequired,\n      firstName: PropTypes.string.isRequired,\n      id: PropTypes.string.isRequired,\n      dob: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n};\n\nexport { EmployeesBD as default };\n","import axios from 'axios';\nimport React, { Fragment, useEffect, useState } from 'react';\nimport Employees from '../components/Employees';\nimport EmployeesBD from '../components/EmployeesBD';\n\nconst sortedEmployees = employees => {\n  if (employees.length) {\n    const sortedEmployees = employees.sort((a, b) => {\n      const nameA = a.lastName.toLowerCase();\n      const nameB = b.lastName.toLowerCase();\n\n      return nameA < nameB ? -1 : nameA > nameB ? 1 : 0;\n    });\n    return sortedEmployees;\n  }\n\n  return [];\n};\n\nconst parsedEmployees = JSON.parse(localStorage.getItem('employees'));\n\nconst EmployeesPage = () => {\n  const [employees, setEmployees] = useState(parsedEmployees || []);\n  const [activeEmployees, setActiveEmployees] = useState([]);\n\n  const sortedEmployeesbyLastname = sortedEmployees(employees);\n  const sortedActiveEmployeesbyLastname = sortedEmployees(activeEmployees);\n\n  const handleAddActiveEmployer = employer => {\n    const persistedEmployer = activeEmployees.filter(\n      emp => emp.id === employer.id,\n    );\n\n    if (persistedEmployer.length === 0) {\n      setActiveEmployees([...activeEmployees, employer]);\n    } else {\n      return;\n    }\n  };\n\n  const handleDeleteActiveEmployer = id => {\n    if (activeEmployees.length > 0) {\n      setActiveEmployees(activeEmployees.filter(emp => emp.id !== id));\n    }\n\n    return;\n  };\n\n  useEffect(() => {\n    const parsedActiveEmployees = JSON.parse(\n      localStorage.getItem('activeEmployees'),\n    );\n\n    if (parsedActiveEmployees) {\n      setActiveEmployees(parsedActiveEmployees);\n    }\n\n    axios\n      .get('https://yalantis-react-school-api.yalantis.com/api/task0/users')\n      .then(({ data }) => setEmployees(data));\n\n    return () => {\n      console.log('cleaned up');\n    };\n  }, []);\n\n  useEffect(() => {\n    const activeEmployeesJSON = JSON.stringify(activeEmployees);\n    localStorage.setItem('activeEmployees', activeEmployeesJSON);\n\n    const employeesJson = JSON.stringify(employees);\n    localStorage.setItem('employees', employeesJson);\n  }, [employees, activeEmployees]);\n\n  return (\n    <Fragment>\n      <Employees\n        onAddActiveEmployees={handleAddActiveEmployer}\n        onDeleteEmployerById={handleDeleteActiveEmployer}\n        employees={sortedEmployeesbyLastname}\n      />\n      {(sortedActiveEmployeesbyLastname.length && (\n        <EmployeesBD employees={sortedActiveEmployeesbyLastname} />\n      )) || <h2 style={{ color: 'palegoldenrod' }}>Employees List is empty</h2>}\n    </Fragment>\n  );\n};\n\nexport { EmployeesPage as default };\n","import styles from './index.module.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter, Switch, Route, Link } from 'react-router-dom';\n\nimport EmployeesPage from './pages/EmployeesPage';\n\nconst App = () => (\n  <div className={styles.container}>\n    <EmployeesPage />\n  </div>\n);\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// const App = () => (\n//   <div className={styles.container}>\n//     <Switch>\n//       <Route path=\"/\" exact>\n//         <Link to=\"/employees\">Employees</Link>\n//       </Route>\n//       <Route path=\"/employees\">\n//         <EmployeesPage />\n//       </Route>\n//     </Switch>\n//   </div>\n// );\n\n// ReactDOM.render(\n//   <BrowserRouter>\n//     <App />\n//   </BrowserRouter>,\n//   document.getElementById('root'),\n// );\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Employees_wrapper__PUh_4\",\"empList\":\"Employees_empList__3nqf1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"EmployeesBD_wrapper__MUUy-\",\"empList\":\"EmployeesBD_empList__3rQtF\"};"],"sourceRoot":""}